class Solution {
     public:
     vector<int> shortestAlternatingPaths(int n, vector<vector<int>>&r, vector<vector<int>>&b) {
          vector<int> ans(n);
          
          vector<vector<int>> bAdj(n);
          vector<vector<int>> rAdj(n);
          for(int i=0;i<r.size();i++) rAdj[r[i][0]].push_back(r[i][1]);
          for(int i=0;i<b.size();i++) bAdj[b[i][0]].push_back(b[i][1]);

          queue<pair<int,int>> q;
          vector<pair<int,int>> res(n,{INT_MAX,INT_MAX});
          res[0]={0,0};

          q.push({0,-1});
          q.push({0,1});
          int currDist = 0;
          
          while(!q.empty()){
               int size = q.size();
               
               while(size--){
                    auto [node,edge] = q.front();
                    q.pop();
                    
                    if(edge==1){
                         for(auto x:rAdj[node]){
                         if(res[x].second > 1+currDist){
                              q.push({x,-1});
                              res[x].second = 1+currDist;
                         }
                         }
                    }
                    else{
                         for(auto x:bAdj[node]){
                            if(res[x].first > 1+currDist){
                                q.push({x,1});
                                res[x].first = 1+currDist;
                            }
                         }
                    }
               }
               currDist++;
          }
          
          for(int i=0; i<n; i++){
               int mini = min(res[i].first,res[i].second);
               ans[i] = (mini==INT_MAX) ? -1 : mini;
          }
          
          return ans;
     }
};