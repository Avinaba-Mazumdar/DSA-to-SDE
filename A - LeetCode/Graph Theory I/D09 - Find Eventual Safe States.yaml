class Solution {
     public:
     vector<int> eventualSafeNodes(vector<vector<int>> &G) {
          int n = G.size();
          vector<int> color(n,0), ans;
          
          for(int i=0; i<n; i++){
               if(color[i]==2 or dfs(G, color, i))
                    ans.push_back(i);
          }
          
          return ans;
     }
     
     private:
     bool dfs(vector<vector<int>> &G, vector<int> &color, int node){
          color[node] = 1;
          
          for(int &it : G[node]){
               if((color[it]==0 and !dfs(G, color, it)) or color[it]==1)
                    return false;
          }
          
          color[node] = 2;
          return true;
     }
};