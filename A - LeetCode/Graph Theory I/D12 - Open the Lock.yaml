class Solution {
     public:
     int openLock(vector<string> &deadends, string trg) {
          unordered_set<string> deadSet(deadends.begin(), deadends.end());
          if(deadSet.count("0000")) return -1;
          if(trg == "0000") return 0;
          
          queue<string> Q;
          Q.push("0000");
          
          for(int ans=0; !Q.empty(); ans++){
               int size = Q.size();
               
               while(size--){
                    string curr = Q.front();
                    Q.pop();
                    
                    if(curr == trg) return ans;
                    
                    for(string &str : neighbors(curr)){
                         if(deadSet.count(str)) continue;
                         deadSet.insert(str);
                         Q.push(str);
                    }
               }
          }
          return -1;
     }
     
     private:
     vector<string> neighbors(string &code){
          vector<string> res;
          
          for(int i=0; i<4; i++) {
               for (int diff=-1; diff<=1; diff+=2) {
                    string str = code;
                    str[i] = (str[i] - '0' + diff + 10) % 10 + '0';
                    res.push_back(str);
               }
          }
          
          return res;
     }
};